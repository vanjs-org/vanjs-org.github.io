let e=Array.isArray,t=document,o=e=>"object"!=typeof e?t.createTextNode(e):e;export let add=(t,...r)=>{for(let l of r)e(l)?add(t,...l):t.appendChild(o(l))};let r=(o,...r)=>{let[l,n]="object"!=typeof r[0]||r[0]instanceof Node||e(r[0])?[{},r]:[r[0],r.slice(1)],d=t.createElement(o);for(let[e,t]of Object.entries(l))t&&(e.startsWith("on")?d[e]=t:d.setAttribute(e,t));return add(d,...n),d};export let tags=(...e)=>Object.fromEntries(e.map((e=>[e,r.bind(null,e)])));export let state=e=>({val:e,t:[]});export let bind=(t,r,l=(e=>o(r(...e))))=>{if(!e(t))return bind([t],r,l);let n=o(r(...t.map((e=>e.val)))),d={o:t,l:n,i:l,p:r};for(let e of t)e.t.push(d);return n};export let setState=(t,o)=>{if(!e(t))return setState([t],[o]);let r=new Set;for(let e=0;e<t.length;++e){let l=t[e];if(l.t=l.t.filter((e=>e.l.isConnected)),o[e]!==l.val){l.u=l.val,l.val=o[e];for(let e of l.t)r.add(e)}}for(let e of r){let{l:t,o:o,i:r}=e;if(!t.isConnected)continue;let l=r(o.map((e=>e.val)),o.map((e=>e.u)),t,e.p);l!==t&&(t.replaceWith(l),e.l=l)}};