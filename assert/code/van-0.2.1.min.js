export const add=(t,...o)=>{for(const e of o)if(typeof e==="string")t.appendChild(document.createTextNode(e));else if(Array.isArray(e))add(t,...e);else t.appendChild(e)};export const tag=(t,...o)=>{const[e,n]=o.length===0||typeof o[0]==="string"||o[0]instanceof Node||Array.isArray(o[0])?[{},o]:[o[0],o.slice(1)];const s=document.createElement(t);for(const[t,o]of Object.entries(e))if(o)if(t.startsWith("on"))s[t]=o;else s.setAttribute(t,o);add(s,...n);return s};export const registerTags=(t,...o)=>{for(const e of o)t[e]=(...t)=>tag(e,...t)};export const state=t=>({val:t,t:[]});const strToTextDom=t=>typeof t==="string"?document.createTextNode(t):t;export const bind=(t,o,e=(t=>strToTextDom(o(...t))))=>{const n=strToTextDom(o(...t.map((t=>t.val))));const s={o:t,i:n,p:e};for(const o of t)o.t.push(s);return n};export const setState=(t,o)=>{if(!Array.isArray(t))return setState([t],[o]);const e=new Set;for(let n=0;n<t.length;++n){const s=t[n];s.t=s.t.filter((t=>t.i.isConnected));if(o[n]!==s.val){s.g=s.val;s.val=o[n];for(const t of s.t)e.add(t)}}for(const t of e){const{i:o,o:e,p:n}=t;if(!o.isConnected)continue;const[s,r]=[e.map((t=>t.val)),e.map((t=>t.g))];const c=n(s,r,o);if(c!==o){o.replaceWith(c);t.i=c}}};