let e=document,t=Object,l=null,n=t=>t instanceof Node?t:e.createTextNode(t);export let add=(e,...t)=>t.flat(1/0).forEach((t=>e.appendChild(n(t))));let d,r=(l,...n)=>{let[d,...r]=n[0]?.constructor===t?n:[{},...n],o=e.createElement(l);return t.entries(d).forEach((([e,t])=>{t&&(e.startsWith("on")?o[e]=t:o.setAttribute(e,t))})),add(o,...r),o};export let tags=(...e)=>t.fromEntries(e.map((e=>[e,r.bind(l,e)])));let o=(e,t)=>{t!==e.val&&(e.t?t===e.t&&(e.t=l,d.delete(e)):((e=>{d=(d??(setTimeout(s,0),new Set)).add(e)})(e),e.t=e.val),e.val=t)},s=()=>{let e=[...d];d=l,new Set(e.map((e=>e.l=e.l.filter((e=>e.o.isConnected)))).flat()).forEach((e=>{let{o:t,u:l,i:n}=e;if(t.isConnected){let d=n(l.map((e=>e.val)),l.map((e=>e.t)),t,e.p);d!==t&&(t.replaceWith(d),e.o=d)}})),e.forEach((e=>e.t=l))};export let state=e=>{let t={val:e,l:[]};return[t,o.bind(l,t)]};export let bind=(e,t,l=(e=>n(t(...e))))=>{e=[e].flat();let d=n(t(...e.map((e=>e.val)))),r={u:e,o:d,i:l,p:t};return e.forEach((e=>e.l.push(r))),d};